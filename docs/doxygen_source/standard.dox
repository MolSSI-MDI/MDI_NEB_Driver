/** \page mdi_standard MDI Standard

\section standard_overview Overview

The MDI Standard provides a straightforward, API-like method for enabling interoperability among computational molecular sciences codes.
It uses a driver/engine model in which a driver code controls the high-level program flow of one or more engine codes.
The driver exercises this control through the use of \ref command_list "commands" that are defined by the MDI Standard.
Commands are available that correspond to a variety of tasks, such as "receive a new set of nuclear coordinates from me" (\ref send_coords), "run a self-consistent field calculation" (\ref scf_command) and "send me the forces on the nuclei" (\ref recv_forces).
The MDI standard defines the \ref standard_units "units", data types, and formatting of any data communicated between codes in response to a command.




\section standard_units Units

All physical quantities communicated through MDI must be expressed in atomic units.
Whenever it is necessary to perform a unit conversion on data communicated through MDI, the conversion factor should be obtained through the MDI_Conversion_Factor() function.
Use of this function ensures self-consistency in unit conversions between codes, which is important for avoiding numerical instabilities.



\section standard_nodes_sec Nodes

One of the powerful features of the MDI Standard is that it permits drivers to take advantage of existing implementations of time integrators and geometry optimizers in MDI engines.
In particular, the \ref md_init and \ref optg_init commands cause an engine to begin a molecular dynamics trajectory or a geometry optimization, respectively.
Upon receiving one of these commands, an engine will perform the corresponding simulation without requiring further instruction from the driver, except that it will pause at certain "nodes" and listen for new commands.

The MDI Standard defines several nodes.
Their names and when they occur are as follows:

\par
<b> @PRE-FORCES </b> - After calculating all contributions to the atomic forces, \b except those associated with a constraint algorithm like SHAKE or RATTLE. <br>
<b> @FORCES </b> - After calculating all contributions to the atomic forces. <br>
<b> @COORDS </b> - After updating the atomic coordinates.

Several MDI commands are only relevant when an engine is paused at a node.
The \ref send_node command instructs the engine to send the name of its node, while the \ref next_node command instructs the engine to proceed in its simulation until it reaches the next node.
In addition, there are commands associated with each type of node (\ref pre-forces_node, \ref forces_node, \ref coords_node) which instruct the engine to proceed in its simulation until it reaches the next node of that particular type.

A typical MD implementation might progress from a @PRE-FORCES node, to the @FORCES node, to the @COORDS node, and then repeat the cycle; however, this behavior is \b not guaranteed.
Engines are permitted to pass through nodes in whatever order the implementation dictates.
When writing drivers, it is a best practice to avoid assumptions about the ordering or frequency of nodes.



\section standard_constants_sec Constants

The following constants are defined by the MDI Standard and are accessible through the \ref library_page "MDI Library":

  - \c MDI_INT - Data type identifier for integers
  - \c MDI_DOUBLE - Data type identifier for double precision floats
  - \c MDI_CHAR - Data type identifier for characters
  - \c MDI_INT_NUMPY - Data type identifier for Python NumPy integer arrays
  - \c MDI_DOUBLE_NUMPY - Data type identifier for Python NumPy double arrays
  - \c MDI_NAME_LENGTH - Maximum number of characters in the name of an MDI code (see \ref library_launching_sec) or node (see \ref standard_nodes_sec)
  - \c MDI_COMMAND_LENGTH - Maximum number of characters in an MDI command (see \ref command_list)




\section command_list Command List

The following is a list of commands that are officially part of the MDI standard.




\subsection next_node @

The engine proceeds to the next node (see \ref standard_nodes_sec).
This command requires that either the \c MD_INIT command or the \c OPTG_INIT command was previously executed.



\subsection send_node <@

The engine sends the driver a string that corresponds to the name of its current node (see \ref standard_nodes_sec).

\par
<b> Data Type: </b> \c MDI_CHAR <br>
<b> Quantity: </b> <c> MDI_NAME_LENGTH </c>



\subsection recv_cdensity <CDENSITY

The engine sends the Cartesian coordinates of a set of grid points.
This command is intended to be used in conjuction with the \ref recv_ndensity and \ref recv_density commands; these three commands enable a driver to acquire the electronic density distribution of an engine in a grid representation.
See the \ref recv_density command for more details.

\par
<b> Data Type: </b> \c MDI_DOUBLE <br>
<b> Quantity: </b> <c> 3 * NDENSITY </c>



\subsection set_cell >CELL

The driver sends a set of cell vectors to the engine, which resizes its simulation cell to the dimensions specified by the cell vectors.

\par
<b> Data Type: </b> \c MDI_DOUBLE <br>
<b> Quantity: </b> 9 <br>
<b> Note: </b> In the case of a quantum chemistry code that uses a plane wave basis set, the engine will recalculate the g-vectors either immediately or at the beginning of the next SCF command.



\subsection recv_cell <CELL

The engine sends a set of cell vectors to the driver, in the same format as specified for the \c >CELL command.

\par
<b> Data Type: </b> \c MDI_DOUBLE <br>
<b> Quantity: </b> 9


\subsection send_charges >CHARGES

The driver sends a set of atomic charges to the engine, which replaces its atomic charges with those sent by the driver.

\par
<b> Data Type: </b> \c MDI_DOUBLE <br>
<b> Quantity: </b> \c NATOMS <br>
<b> Format: </b> Sequentially ascending order of atomic index <br>



\subsection recv_charges <CHARGES

The engine sends a set of atomic charges to the driver, in the same format as specified for the \c >CHARGES command.

\par
<b> Data Type: </b> \c MDI_DOUBLE <br>
<b> Quantity: </b> \c NATOMS <br>
<b> Format: </b> Sequentially ascending order of atomic index



\subsection coords_node @COORDS

The engine proceeds to the next @COORDS node (see \ref standard_nodes_sec).
This command requires that either the \c MD_INIT command or the \c OPTG_INIT command was previously executed.



\subsection send_coords >COORDS

The driver sends a set of atomic coordinates to the engine, which replaces its atomic coordinates with those sent by the driver.

\par
<b> Data Type: </b> \c MDI_DOUBLE <br>
<b> Quantity: </b> <c> 3 * NATOMS </c> <br>
<b> Format: </b> Sequentially ascending order of atomic index, with the coordinates for each individual atom being provided in xyz order <br>



\subsection recv_coords <COORDS

The engine sends a set of atomic coordinates to the driver.

\par
<b> Data Type: </b> \c MDI_DOUBLE <br>
<b> Quantity: </b> <c> 3 * NATOMS </c> <br>
<b> Format: </b> Sequentially ascending order of atomic index, with the coordinates for each individual atom being provided in xyz order



\subsection send_cpotential >CPOTENTIAL

The driver sends the Cartesian coordinates of a set of grid points.
This command is intended to be used in conjuction with the \ref send_npotential and \ref send_potential commands; these three commands enable a driver to set an external potential that is incorporated into a subsequent \ref scf_command command.
See the \ref send_potential command for more details.

Before sending this command, the driver must have first sent the number of grid points used to represent the potential via the \ref send_npotential command.
It is also necessary that the driver send the values of the grid points via the \ref send_cpotential command prior to any subsequent \ref scf_command command.

\par
<b> Data Type: </b> \c MDI_DOUBLE <br>
<b> Quantity: </b> <c> 3 * NPOTENTIAL </c>



\subsection recv_density <DENSITY

The engine sends the value of its electronic density on a set of grid points.
This command is intended to be used in conjuction with the \ref recv_ndensity and \ref recv_cdensity commands; these three commands enable a driver to acquire the electronic density distribution of an engine in a grid representation.

\par
<b> Data Type: </b> \c MDI_DOUBLE <br>
<b> Quantity: </b> \c NDENSITY



\subsection recv_energy <ENERGY

The engine sends its most recently calculated energy to the driver.
The \c MD_INIT, \c SCF, and \c ATOM_STEP commands can be used to cause the engine to calculate a new energy.

\par
<b> Data Type: </b> \c MDI_DOUBLE <br>
<b> Quantity: </b> 1



\subsection exit_command EXIT

The engine terminates and can no longer be sent commands.



\subsection forces_node @FORCES

The engine proceeds to the next @FORCES node (see \ref standard_nodes_sec).
This command requires that either the \c MD_INIT command or the \c OPTG_INIT command was previously executed.



\subsection send_forces >FORCES

The driver sends a set of atomic forces to the engine, which replaces its internal forces with the forces sent by the driver.

\par
<b> Data Type: </b> \c MDI_DOUBLE <br>
<b> Quantity: </b> <c> 3 * NATOMS </c> <br>
<b> Format: </b> Sequentially ascending order of atomic index, with the forces for each individual atom being provided in xyz order <br>



\subsection send_add_forces +FORCES

The driver sends a set of atomic forces to the engine, which adds the forces sent by the driver to its internal forces.

\par
<b> Data Type: </b> \c MDI_DOUBLE <br>
<b> Quantity: </b> <c> 3 * NATOMS </c> <br>
<b> Format: </b> Sequentially ascending order of atomic index, with the forces for each individual atom being provided in xyz order <br>



\subsection recv_forces <FORCES

The engine calculates and sends a set of atomic forces to the driver.
These forces include all force contributions, including the force contributions associated with any constraint algorithm (e.g. SHAKE, RATTLE, etc.).

\par
<b> Data Type: </b> \c MDI_DOUBLE <br>
<b> Quantity: </b> <c> 3 * NATOMS </c> <br>
<b> Format: </b> Sequentially ascending order of atomic index, with the forces for each individual atom being provided in xyz order



\subsection recv_masses <MASSES

The engine sends the driver the mass of each of the atom types.

\par
<b> Data Type: </b> \c MDI_DOUBLE <br>
<b> Quantity: </b> <c> <NTYPES </c> <br>
<b> Format: </b> Sequentially ascending order of type index (see the \c <TYPES command)



\subsection md_init MD_INIT

The engine performs any initialization operations that are necessary before an MD simulation can be time propagated through the use of the \c ATOM_STEP command.
This engine calculates the energy of the system, which can be queried by the \c <ENERGY command.

\par
<b> Note: </b> This command may change the engine's atomic coordinates under certain circumstances, such as if the SHAKE algorithm is used.



\subsection send_name <NAME

The engine sends the driver a string that corresponds to the argument of \c -name in the MDI initialization options.
This argument allows a driver to identify the purpose of connected engine codes within the simulation.
For example, a particular QM/MM driver might require a connection with a single MM code and a single QM code, with the expected name of the MM code being "MM" and the expected name of the QM code being "QM".
After initializing MDI and accepting communicators to the engines, the driver can use this command to identify which of the engines is the MM code and which is the QM code.

\par
<b> Data Type: </b> \c MDI_CHAR <br>
<b> Quantity: </b> <c> MDI_NAME_LENGTH </c>



\subsection recv_natoms <NATOMS

The engine sends the driver the number of atoms in the engine's system.

\par
<b> Data Type: </b> \c MDI_INT <br>
<b> Quantity: </b> 1



\subsection recv_ndensity <NDENSITY

The engine sends the number of grid points it is using to represent its electronic density on a grid.
This command is intended to be used in conjuction with the \ref recv_cdensity and \ref recv_density commands; these three commands enable a driver to acquire the electronic density distribution of an engine in a grid representation.
See the \ref recv_density command for more details.

\par
<b> Data Type: </b> \c MDI_INT <br>
<b> Quantity: </b> 1



\subsection send_npotential >NPOTENTIAL

The driver sends the number of grid points it is using to represent a potential on a grid.
This command is intended to be used in conjuction with the \ref send_cpotential and \ref send_potential commands; these three commands enable a driver to set an external potential that is incorporated into a subsequent \ref scf_command command.
See the \ref send_potential command for more details.

\par
<b> Data Type: </b> \c MDI_INT <br>
<b> Quantity: </b> 1



\subsection recv_types <NTYPES

The engine sends the driver the number of different types of atoms (e.g. "H", "He", "C", "O", etc.) in the engine's system.

\par
<b> Data Type: </b> \c MDI_INT <br>
<b> Quantity: </b> 1



\subsection optg_init OPTG_INIT

The engine performs any initialization operations that are necessary before a geometry optimization can be performed through the use of the \c ATOM_STEP command.
This engine calculates the energy of the system, which can be queried by the \c <ENERGY command.

\par
<b> Note: </b> This command may change the engine's atomic coordinates under certain circumstances, such as if the SHAKE algorithm is used.



\subsection send_potential >POTENTIAL

The driver sends an set of values to the engine that correspond to a potential on a grid.
If an \ref scf_command command is later issued, this potential will be incorporated into the SCF calculation as an external potential.

Before sending this command, the driver must have first sent the number of grid points used to represent the potential via the \ref send_npotential command.
It is also necessary that the driver send the Cartesian coordinates of the grid points via the \ref send_cpotential command prior to any subsequent \ref scf_command command.

\par
<b> Data Type: </b> \c MDI_DOUBLE <br>
<b> Quantity: </b> \c NPOTENTIAL



\subsection pre-forces_node @PRE-FORCES

The engine proceeds to the next @PRE-FORCES node (see \ref standard_nodes_sec).
This command requires that either the \c MD_INIT command or the \c OPTG_INIT command was previously executed.



\subsection scf_command SCF

The engine performs a full self-consistent field calculation in order to relax the electronic density distribution.
The engine updates its energy, which can be queried with the \c <ENERGY command.





**/


// >CELL: Define whether the atomic coordinates are scaled.
// >CELL: Describe in detail the format of the cell coordinates
// <FORCES: Need to clarify when forces are recalculated.
// <PRE-FORCES: Need to clarify when forces are recalculated.
// >STRESS: Add commands for stresses
// >STRESS: Describe in detail the format of the stress tensor
// >STRESS: Clarify when stresses are recalculated
